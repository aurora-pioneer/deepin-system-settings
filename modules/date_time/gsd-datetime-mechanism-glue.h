/* Generated by dbus-binding-tool; do not edit! */


#ifndef __dbus_glib_marshal_gsd_datetime_mechanism_MARSHAL_H__
#define __dbus_glib_marshal_gsd_datetime_mechanism_MARSHAL_H__

#include	<glib-object.h>

G_BEGIN_DECLS

#ifdef G_ENABLE_DEBUG
#define g_marshal_value_peek_boolean(v)  g_value_get_boolean (v)
#define g_marshal_value_peek_char(v)     g_value_get_schar (v)
#define g_marshal_value_peek_uchar(v)    g_value_get_uchar (v)
#define g_marshal_value_peek_int(v)      g_value_get_int (v)
#define g_marshal_value_peek_uint(v)     g_value_get_uint (v)
#define g_marshal_value_peek_long(v)     g_value_get_long (v)
#define g_marshal_value_peek_ulong(v)    g_value_get_ulong (v)
#define g_marshal_value_peek_int64(v)    g_value_get_int64 (v)
#define g_marshal_value_peek_uint64(v)   g_value_get_uint64 (v)
#define g_marshal_value_peek_enum(v)     g_value_get_enum (v)
#define g_marshal_value_peek_flags(v)    g_value_get_flags (v)
#define g_marshal_value_peek_float(v)    g_value_get_float (v)
#define g_marshal_value_peek_double(v)   g_value_get_double (v)
#define g_marshal_value_peek_string(v)   (char*) g_value_get_string (v)
#define g_marshal_value_peek_param(v)    g_value_get_param (v)
#define g_marshal_value_peek_boxed(v)    g_value_get_boxed (v)
#define g_marshal_value_peek_pointer(v)  g_value_get_pointer (v)
#define g_marshal_value_peek_object(v)   g_value_get_object (v)
#define g_marshal_value_peek_variant(v)  g_value_get_variant (v)
#else /* !G_ENABLE_DEBUG */
/* WARNING: This code accesses GValues directly, which is UNSUPPORTED API.
 *          Do not access GValues directly in your code. Instead, use the
 *          g_value_get_*() functions
 */
#define g_marshal_value_peek_boolean(v)  (v)->data[0].v_int
#define g_marshal_value_peek_char(v)     (v)->data[0].v_int
#define g_marshal_value_peek_uchar(v)    (v)->data[0].v_uint
#define g_marshal_value_peek_int(v)      (v)->data[0].v_int
#define g_marshal_value_peek_uint(v)     (v)->data[0].v_uint
#define g_marshal_value_peek_long(v)     (v)->data[0].v_long
#define g_marshal_value_peek_ulong(v)    (v)->data[0].v_ulong
#define g_marshal_value_peek_int64(v)    (v)->data[0].v_int64
#define g_marshal_value_peek_uint64(v)   (v)->data[0].v_uint64
#define g_marshal_value_peek_enum(v)     (v)->data[0].v_long
#define g_marshal_value_peek_flags(v)    (v)->data[0].v_ulong
#define g_marshal_value_peek_float(v)    (v)->data[0].v_float
#define g_marshal_value_peek_double(v)   (v)->data[0].v_double
#define g_marshal_value_peek_string(v)   (v)->data[0].v_pointer
#define g_marshal_value_peek_param(v)    (v)->data[0].v_pointer
#define g_marshal_value_peek_boxed(v)    (v)->data[0].v_pointer
#define g_marshal_value_peek_pointer(v)  (v)->data[0].v_pointer
#define g_marshal_value_peek_object(v)   (v)->data[0].v_pointer
#define g_marshal_value_peek_variant(v)  (v)->data[0].v_pointer
#endif /* !G_ENABLE_DEBUG */


/* NONE:POINTER */
#define dbus_glib_marshal_gsd_datetime_mechanism_VOID__POINTER	g_cclosure_marshal_VOID__POINTER
#define dbus_glib_marshal_gsd_datetime_mechanism_NONE__POINTER	dbus_glib_marshal_gsd_datetime_mechanism_VOID__POINTER

/* NONE:STRING,POINTER */
extern void dbus_glib_marshal_gsd_datetime_mechanism_VOID__STRING_POINTER (GClosure     *closure,
                                                                           GValue       *return_value,
                                                                           guint         n_param_values,
                                                                           const GValue *param_values,
                                                                           gpointer      invocation_hint,
                                                                           gpointer      marshal_data);
void
dbus_glib_marshal_gsd_datetime_mechanism_VOID__STRING_POINTER (GClosure     *closure,
                                                               GValue       *return_value G_GNUC_UNUSED,
                                                               guint         n_param_values,
                                                               const GValue *param_values,
                                                               gpointer      invocation_hint G_GNUC_UNUSED,
                                                               gpointer      marshal_data)
{
  typedef void (*GMarshalFunc_VOID__STRING_POINTER) (gpointer     data1,
                                                     gpointer     arg_1,
                                                     gpointer     arg_2,
                                                     gpointer     data2);
  register GMarshalFunc_VOID__STRING_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;

  g_return_if_fail (n_param_values == 3);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_VOID__STRING_POINTER) (marshal_data ? marshal_data : cc->callback);

  callback (data1,
            g_marshal_value_peek_string (param_values + 1),
            g_marshal_value_peek_pointer (param_values + 2),
            data2);
}
#define dbus_glib_marshal_gsd_datetime_mechanism_NONE__STRING_POINTER	dbus_glib_marshal_gsd_datetime_mechanism_VOID__STRING_POINTER

/* NONE:UINT,UINT,UINT,POINTER */
extern void dbus_glib_marshal_gsd_datetime_mechanism_VOID__UINT_UINT_UINT_POINTER (GClosure     *closure,
                                                                                   GValue       *return_value,
                                                                                   guint         n_param_values,
                                                                                   const GValue *param_values,
                                                                                   gpointer      invocation_hint,
                                                                                   gpointer      marshal_data);
void
dbus_glib_marshal_gsd_datetime_mechanism_VOID__UINT_UINT_UINT_POINTER (GClosure     *closure,
                                                                       GValue       *return_value G_GNUC_UNUSED,
                                                                       guint         n_param_values,
                                                                       const GValue *param_values,
                                                                       gpointer      invocation_hint G_GNUC_UNUSED,
                                                                       gpointer      marshal_data)
{
  typedef void (*GMarshalFunc_VOID__UINT_UINT_UINT_POINTER) (gpointer     data1,
                                                             guint        arg_1,
                                                             guint        arg_2,
                                                             guint        arg_3,
                                                             gpointer     arg_4,
                                                             gpointer     data2);
  register GMarshalFunc_VOID__UINT_UINT_UINT_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;

  g_return_if_fail (n_param_values == 5);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_VOID__UINT_UINT_UINT_POINTER) (marshal_data ? marshal_data : cc->callback);

  callback (data1,
            g_marshal_value_peek_uint (param_values + 1),
            g_marshal_value_peek_uint (param_values + 2),
            g_marshal_value_peek_uint (param_values + 3),
            g_marshal_value_peek_pointer (param_values + 4),
            data2);
}
#define dbus_glib_marshal_gsd_datetime_mechanism_NONE__UINT_UINT_UINT_POINTER	dbus_glib_marshal_gsd_datetime_mechanism_VOID__UINT_UINT_UINT_POINTER

/* NONE:BOOLEAN,POINTER */
extern void dbus_glib_marshal_gsd_datetime_mechanism_VOID__BOOLEAN_POINTER (GClosure     *closure,
                                                                            GValue       *return_value,
                                                                            guint         n_param_values,
                                                                            const GValue *param_values,
                                                                            gpointer      invocation_hint,
                                                                            gpointer      marshal_data);
void
dbus_glib_marshal_gsd_datetime_mechanism_VOID__BOOLEAN_POINTER (GClosure     *closure,
                                                                GValue       *return_value G_GNUC_UNUSED,
                                                                guint         n_param_values,
                                                                const GValue *param_values,
                                                                gpointer      invocation_hint G_GNUC_UNUSED,
                                                                gpointer      marshal_data)
{
  typedef void (*GMarshalFunc_VOID__BOOLEAN_POINTER) (gpointer     data1,
                                                      gboolean     arg_1,
                                                      gpointer     arg_2,
                                                      gpointer     data2);
  register GMarshalFunc_VOID__BOOLEAN_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;

  g_return_if_fail (n_param_values == 3);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_VOID__BOOLEAN_POINTER) (marshal_data ? marshal_data : cc->callback);

  callback (data1,
            g_marshal_value_peek_boolean (param_values + 1),
            g_marshal_value_peek_pointer (param_values + 2),
            data2);
}
#define dbus_glib_marshal_gsd_datetime_mechanism_NONE__BOOLEAN_POINTER	dbus_glib_marshal_gsd_datetime_mechanism_VOID__BOOLEAN_POINTER

/* NONE:INT64,POINTER */
extern void dbus_glib_marshal_gsd_datetime_mechanism_VOID__INT64_POINTER (GClosure     *closure,
                                                                          GValue       *return_value,
                                                                          guint         n_param_values,
                                                                          const GValue *param_values,
                                                                          gpointer      invocation_hint,
                                                                          gpointer      marshal_data);
void
dbus_glib_marshal_gsd_datetime_mechanism_VOID__INT64_POINTER (GClosure     *closure,
                                                              GValue       *return_value G_GNUC_UNUSED,
                                                              guint         n_param_values,
                                                              const GValue *param_values,
                                                              gpointer      invocation_hint G_GNUC_UNUSED,
                                                              gpointer      marshal_data)
{
  typedef void (*GMarshalFunc_VOID__INT64_POINTER) (gpointer     data1,
                                                    gint64       arg_1,
                                                    gpointer     arg_2,
                                                    gpointer     data2);
  register GMarshalFunc_VOID__INT64_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;

  g_return_if_fail (n_param_values == 3);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_VOID__INT64_POINTER) (marshal_data ? marshal_data : cc->callback);

  callback (data1,
            g_marshal_value_peek_int64 (param_values + 1),
            g_marshal_value_peek_pointer (param_values + 2),
            data2);
}
#define dbus_glib_marshal_gsd_datetime_mechanism_NONE__INT64_POINTER	dbus_glib_marshal_gsd_datetime_mechanism_VOID__INT64_POINTER

G_END_DECLS

#endif /* __dbus_glib_marshal_gsd_datetime_mechanism_MARSHAL_H__ */

#include <dbus/dbus-glib.h>
static const DBusGMethodInfo dbus_glib_gsd_datetime_mechanism_methods[] = {
  { (GCallback) gsd_datetime_mechanism_set_timezone, dbus_glib_marshal_gsd_datetime_mechanism_NONE__STRING_POINTER, 0 },
  { (GCallback) gsd_datetime_mechanism_get_timezone, dbus_glib_marshal_gsd_datetime_mechanism_NONE__POINTER, 65 },
  { (GCallback) gsd_datetime_mechanism_can_set_timezone, dbus_glib_marshal_gsd_datetime_mechanism_NONE__POINTER, 140 },
  { (GCallback) gsd_datetime_mechanism_set_date, dbus_glib_marshal_gsd_datetime_mechanism_NONE__UINT_UINT_UINT_POINTER, 215 },
  { (GCallback) gsd_datetime_mechanism_set_time, dbus_glib_marshal_gsd_datetime_mechanism_NONE__INT64_POINTER, 296 },
  { (GCallback) gsd_datetime_mechanism_can_set_time, dbus_glib_marshal_gsd_datetime_mechanism_NONE__POINTER, 374 },
  { (GCallback) gsd_datetime_mechanism_adjust_time, dbus_glib_marshal_gsd_datetime_mechanism_NONE__INT64_POINTER, 445 },
  { (GCallback) gsd_datetime_mechanism_get_hardware_clock_using_utc, dbus_glib_marshal_gsd_datetime_mechanism_NONE__POINTER, 521 },
  { (GCallback) gsd_datetime_mechanism_set_hardware_clock_using_utc, dbus_glib_marshal_gsd_datetime_mechanism_NONE__BOOLEAN_POINTER, 613 },
  { (GCallback) gsd_datetime_mechanism_get_using_ntp, dbus_glib_marshal_gsd_datetime_mechanism_NONE__POINTER, 701 },
  { (GCallback) gsd_datetime_mechanism_set_using_ntp, dbus_glib_marshal_gsd_datetime_mechanism_NONE__BOOLEAN_POINTER, 800 },
  { (GCallback) gsd_datetime_mechanism_can_set_using_ntp, dbus_glib_marshal_gsd_datetime_mechanism_NONE__POINTER, 875 },
};

const DBusGObjectInfo dbus_glib_gsd_datetime_mechanism_object_info = {  1,
  dbus_glib_gsd_datetime_mechanism_methods,
  12,
"org.gnome.SettingsDaemon.DateTimeMechanism\0SetTimezone\0A\0tz\0I\0s\0\0org.gnome.SettingsDaemon.DateTimeMechanism\0GetTimezone\0A\0timezone\0O\0F\0N\0s\0\0org.gnome.SettingsDaemon.DateTimeMechanism\0CanSetTimezone\0A\0value\0O\0F\0N\0i\0\0org.gnome.SettingsDaemon.DateTimeMechanism\0SetDate\0A\0day\0I\0u\0month\0I\0u\0year\0I\0u\0\0org.gnome.SettingsDaemon.DateTimeMechanism\0SetTime\0A\0seconds_since_epoch\0I\0x\0\0org.gnome.SettingsDaemon.DateTimeMechanism\0CanSetTime\0A\0value\0O\0F\0N\0i\0\0org.gnome.SettingsDaemon.DateTimeMechanism\0AdjustTime\0A\0seconds_to_add\0I\0x\0\0org.gnome.SettingsDaemon.DateTimeMechanism\0GetHardwareClockUsingUtc\0A\0is_using_utc\0O\0F\0N\0b\0\0org.gnome.SettingsDaemon.DateTimeMechanism\0SetHardwareClockUsingUtc\0A\0is_using_utc\0I\0b\0\0org.gnome.SettingsDaemon.DateTimeMechanism\0GetUsingNtp\0A\0can_use_ntp\0O\0F\0N\0b\0is_using_ntp\0O\0F\0N\0b\0\0org.gnome.SettingsDaemon.DateTimeMechanism\0SetUsingNtp\0A\0is_using_ntp\0I\0b\0\0org.gnome.SettingsDaemon.DateTimeMechanism\0CanSetUsingNtp\0A\0value\0O\0F\0N\0i\0\0\0",
"\0",
"\0"
};

