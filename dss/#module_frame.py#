#! /usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright (C) 2011 ~ 2012 Deepin, Inc.
#               2011 ~ 2012 Wang Yong
# 
# Author:     Wang Yong <lazycat.manatee@gmail.com>
# Maintainer: Wang Yong <lazycat.manatee@gmail.com>
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import gtk
import gobject
from dtk.ui.config import Config

class ModuleFrame(gtk.Plug):
    '''
    class docs
    '''
	
    def __init__(self, module_config_path):
        '''
        init docs
        '''
        gtk.Plug.__init__(self, 0)
        self.module_config_path = module_config_path
        self.module_config = Config(self.module_config_path)
        self.module_config.load()
        
        self.connect("destroy", self.module_frame_exit)
        
    def module_frame_exit(self, widget):
        print "%s module exit." % (self.module_config.get("main", "id"))
        
        gtk.main_quit()
    
    def init(self):
        # WARING: only use once in one process
        DBusGMainLoop(set_as_default=True) 
        
        # Init threads.
        gtk.gdk.threads_init()

        # Init dbus.
        self.bus = dbus.SessionBus()
        self.app_dbus_name = "com.deepin.system_settings"
        self.app_object_name = "/com/deepin/system_settings"
        
        self.module_dbus_name = "com.deepin.individuation_settings"
        self.module_object_name = "/com/deepin/individuation_settings"
        self.module_bus_name = dbus.service.BusName(module_dbus_name, bus=self.bus)
        
        # Start dbus service.
        DBusService(self.module_bus_name, 
                    self.module_dbus_name, 
                    self.module_object_name)
        
gobject.type_register(ModuleFrame)
